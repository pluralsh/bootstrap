external-dns:
  enabled: true
  provider: plural
  rbac:
    create: true
    serviceAccountName: external-dns
  sources:
  - service
  - ingress
  serviceAccount:
    name: external-dns
    create: true
  txtOwnerId: plural
  policy: upsert-only
  extraEnvVars:
  - name: PLURAL_ACCESS_TOKEN
    valueFrom:
      secretKeyRef:
        name: plural-env
        key: PLURAL_ACCESS_TOKEN

plural-certmanager-webhook:
  enabled: true
  certManager:
    namespace: cert-manager
    serviceAccountName: cert-manager

operator:
  enabled: true

application:
  enabled: true
  registry: dkr.plural.sh/bootstrap
  tag: v0.8.3

plural:
  enabled: true
  image:
    repository: dkr.plural.sh/bootstrap/plural-operator
    tag: 0.5.5

ownerEmail: someone@example.com
acmeServer: https://acme.zerossl.com/v2/DV90
letsencryptServer: https://acme-v02.api.letsencrypt.org/directory

dnsSolver:
  webhook:
    groupName: acme.plural.sh
    solverName: plural-solver

acmeEAB: {}

certManagerNamespace: cert-manager

cert-manager:
  enabled: false
  installCRDs: true
  serviceAccount:
    name: cert-manager
  securityContext:
    fsGroup: 1000
    runAsNonRoot: true

ingress-nginx-private:
  enabled: true
  controller:
    image:
      digest: null
      digestChroot: null
    ingressClass: k8s.io/internal-nginx
    electionID: internal-ingress-controller-leader
    ingressClassResource:
      name: internal-nginx  # default: nginx
      enabled: true
      default: false
      controllerValue: "k8s.io/internal-ingress-nginx"
    service:
      annotations:
        service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: /healthz
        networking.gke.io/load-balancer-type: "Internal"
        service.beta.kubernetes.io/azure-load-balancer-internal: "true"
        service.beta.kubernetes.io/aws-load-balancer-scheme: internal
        service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
        service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
        service.beta.kubernetes.io/aws-load-balancer-type: external
        service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
        service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
        service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: '3600'
    admissionWebhooks:
      enabled: false
    config:
      worker-shutdown-timeout: 240s
      proxy-body-size: '0'
      proxy-read-timeout: '3600'
      proxy-send-timeout: '3600'
      log-format-escape-json: "true"
    resources:
      requests:
        cpu: 100m
        memory: 250Mi
    topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: DoNotSchedule
      labelSelector:
        matchLabels:
          app.kubernetes.io/instance: ingress-nginx
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 11
      targetCPUUtilizationPercentage: ""
      targetMemoryUtilizationPercentage: 95
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
          policies:
          - type: Pods
            value: 1
            periodSeconds: 180
        scaleUp:
          stabilizationWindowSeconds: 300
          policies:
          - type: Pods
            value: 2
            periodSeconds: 60
    metrics:
      enabled: true
      service:
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "10254"
          prometheus.io/path: "/metrics"
          prometheus.io/scheme: http
      serviceMonitor:
        enabled: false
      prometheusRule:
        enabled: false

ingress-nginx:
  enabled: true
  controller:
    image:
      digest: null
      digestChroot: null
    admissionWebhooks:
      enabled: false
    service:
      annotations:
        service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
        service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: /healthz
        service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
        service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
        service.beta.kubernetes.io/aws-load-balancer-type: external
        service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
        service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
        service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: '3600'
    config:
      worker-shutdown-timeout: 240s
      proxy-body-size: '0'
      proxy-read-timeout: '3600'
      proxy-send-timeout: '3600'
      log-format-escape-json: "true"
    resources:
      requests:
        cpu: 100m
        memory: 250Mi
    topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: DoNotSchedule
      labelSelector:
        matchLabels:
          app.kubernetes.io/instance: ingress-nginx
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 11
      targetCPUUtilizationPercentage: ""
      targetMemoryUtilizationPercentage: 95
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
          policies:
          - type: Pods
            value: 1
            periodSeconds: 180
        scaleUp:
          stabilizationWindowSeconds: 300
          policies:
          - type: Pods
            value: 2
            periodSeconds: 60
    metrics:
      enabled: true
      service:
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "10254"
          prometheus.io/path: "/metrics"
          prometheus.io/scheme: http
      serviceMonitor:
        enabled: false
      prometheusRule:
        enabled: false

flux2:
  enabled: false
  helmController:
    create: false
  imageAutomationController:
    create: false
  imageReflectionController:
    create: false
  kustomizeController:
    create: false
  notificationController:
    create: false
  sourceController:
    create: true
  policies:
    create: false