external-dns:
  enabled: true
  provider: plural
  rbac:
    create: true
    serviceAccountName: external-dns
  sources:
  - service
  - ingress
  serviceAccount:
    name: external-dns
    create: true
  txtOwnerId: plural
  policy: sync
  extraEnvVars:
  - name: PLURAL_ACCESS_TOKEN
    valueFrom:
      secretKeyRef:
        name: plural-env
        key: PLURAL_ACCESS_TOKEN

plural-certmanager-webhook:
  certManager:
    namespace: cert-manager
    serviceAccountName: cert-manager

application:
  registry: dkr.plural.sh/bootstrap
  tag: v0.8.3

plural:
  image:
    repository: dkr.plural.sh/bootstrap/plural-operator
    tag: 0.5.5

ownerEmail: someone@example.com
acmeServer: https://acme.zerossl.com/v2/DV90
letsencryptServer: https://acme-v02.api.letsencrypt.org/directory

dnsSolver:
  webhook:
    groupName: acme.plural.sh
    solverName: plural-solver

acmeEAB: {}

certManagerNamespace: cert-manager

cert-manager:
  enabled: false
  installCRDs: true
  serviceAccount:
    name: cert-manager
  securityContext:
    fsGroup: 1000
    runAsNonRoot: true

ingress-nginx-private:
  enabled: true
  controller:
    image:
      digest: null
      digestChroot: null
    ingressClass: k8s.io/internal-nginx
    electionID: internal-ingress-controller-leader
    ingressClassResource:
      name: internal-nginx  # default: nginx
      enabled: true
      default: false
      controllerValue: "k8s.io/internal-ingress-nginx"
    service:
      annotations:
        service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: /healthz
        networking.gke.io/load-balancer-type: "Internal"
        service.beta.kubernetes.io/azure-load-balancer-internal: "true"
        service.beta.kubernetes.io/aws-load-balancer-scheme: internal
    admissionWebhooks:
      enabled: false
    config:
      worker-shutdown-timeout: 240s
      proxy-body-size: '0'
      proxy-read-timeout: '3600'
      proxy-send-timeout: '3600'
      log-format-escape-json: "true"
      log-format-upstream: '{"msec":"$msec","connection":"$connection","connection_requests":"$connection_requests","pid":"$pid","request_id":"$request_id","request_length":"$request_length","remote_addr":"$remote_addr","remote_user":"$remote_user","remote_port":"$remote_port","time_local":"$time_local","time_iso8601":"$time_iso8601","request":"$request","request_uri":"$request_uri","args":"$args","status":"$status","body_bytes_sent":"$body_bytes_sent","bytes_sent":"$bytes_sent","http_referer":"$http_referer","http_user_agent":"$http_user_agent","http_x_forwarded_for":"$http_x_forwarded_for","http_host":"$http_host","server_name":"$server_name","request_time":"$request_time","upstream":"$upstream_addr","upstream_connect_time":"$upstream_connect_time","upstream_header_time":"$upstream_header_time","upstream_response_time":"$upstream_response_time","upstream_response_length":"$upstream_response_length","upstream_cache_status":"$upstream_cache_status","ssl_protocol":"$ssl_protocol","ssl_cipher":"$ssl_cipher","scheme":"$scheme","request_method":"$request_method","server_protocol":"$server_protocol","pipe":"$pipe","gzip_ratio":"$gzip_ratio","http_cf_ray":"$http_cf_ray","geoip_country_code":"$geoip_country_code"}'
    proxySetHeaders:
      GeoIP-Country-Code: "$geoip_country_code"
      GeoIP-Country-Name: "$geoip_country_name"
      GeoIP-Continent-Code: "$geoip_city_continent_code"
      GeoIP-Region-Name: "$geoip_region_name"
      GeoIP-Region: "$geoip_region"
      GeoIP-City: "$geoip_city"
      GeoIP-Metro-Code: "$geoip_dma_code"
      GeoIP-Area-Code: "$geoip_area_code"
      GeoIP-Latitude: "$geoip_latitude"
      GeoIP-Longitude: "$geoip_longitude"
      GeoIP-Postal-Code: "$geoip_postal_code"
      GeoIP-Isp: "$geoip_org"
      GeoIP-Organization: "$geoip_org"
    resources:
      requests:
        cpu: 100m
        memory: 250Mi
    topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: DoNotSchedule
      labelSelector:
        matchLabels:
          app.kubernetes.io/instance: ingress-nginx
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 11
      targetCPUUtilizationPercentage: ""
      targetMemoryUtilizationPercentage: 95
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
          policies:
          - type: Pods
            value: 1
            periodSeconds: 180
        scaleUp:
          stabilizationWindowSeconds: 300
          policies:
          - type: Pods
            value: 2
            periodSeconds: 60
    metrics:
      enabled: true
      service:
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "10254"
          prometheus.io/path: "/metrics"
          prometheus.io/scheme: http
      serviceMonitor:
        enabled: false
      prometheusRule:
        enabled: false

ingress-nginx:
  enabled: true
  controller:
    image:
      digest: null
      digestChroot: null
    admissionWebhooks:
      enabled: false
    service:
      annotations:
        service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: /healthz
    config:
      worker-shutdown-timeout: 240s
      proxy-body-size: '0'
      proxy-read-timeout: '3600'
      proxy-send-timeout: '3600'
      log-format-escape-json: "true"
      log-format-upstream: '{"msec":"$msec","connection":"$connection","connection_requests":"$connection_requests","pid":"$pid","request_id":"$request_id","request_length":"$request_length","remote_addr":"$remote_addr","remote_user":"$remote_user","remote_port":"$remote_port","time_local":"$time_local","time_iso8601":"$time_iso8601","request":"$request","request_uri":"$request_uri","args":"$args","status":"$status","body_bytes_sent":"$body_bytes_sent","bytes_sent":"$bytes_sent","http_referer":"$http_referer","http_user_agent":"$http_user_agent","http_x_forwarded_for":"$http_x_forwarded_for","http_host":"$http_host","server_name":"$server_name","request_time":"$request_time","upstream":"$upstream_addr","upstream_connect_time":"$upstream_connect_time","upstream_header_time":"$upstream_header_time","upstream_response_time":"$upstream_response_time","upstream_response_length":"$upstream_response_length","upstream_cache_status":"$upstream_cache_status","ssl_protocol":"$ssl_protocol","ssl_cipher":"$ssl_cipher","scheme":"$scheme","request_method":"$request_method","server_protocol":"$server_protocol","pipe":"$pipe","gzip_ratio":"$gzip_ratio","http_cf_ray":"$http_cf_ray","geoip_country_code":"$geoip_country_code"}'
    proxySetHeaders:
      GeoIP-Country-Code: "$geoip_country_code"
      GeoIP-Country-Name: "$geoip_country_name"
      GeoIP-Continent-Code: "$geoip_city_continent_code"
      GeoIP-Region-Name: "$geoip_region_name"
      GeoIP-Region: "$geoip_region"
      GeoIP-City: "$geoip_city"
      GeoIP-Metro-Code: "$geoip_dma_code"
      GeoIP-Area-Code: "$geoip_area_code"
      GeoIP-Latitude: "$geoip_latitude"
      GeoIP-Longitude: "$geoip_longitude"
      GeoIP-Postal-Code: "$geoip_postal_code"
      GeoIP-Isp: "$geoip_org"
      GeoIP-Organization: "$geoip_org"
    resources:
      requests:
        cpu: 100m
        memory: 250Mi
    topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: DoNotSchedule
      labelSelector:
        matchLabels:
          app.kubernetes.io/instance: ingress-nginx
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 11
      targetCPUUtilizationPercentage: ""
      targetMemoryUtilizationPercentage: 95
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
          policies:
          - type: Pods
            value: 1
            periodSeconds: 180
        scaleUp:
          stabilizationWindowSeconds: 300
          policies:
          - type: Pods
            value: 2
            periodSeconds: 60
    metrics:
      enabled: true
      service:
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "10254"
          prometheus.io/path: "/metrics"
          prometheus.io/scheme: http
      serviceMonitor:
        enabled: false
      prometheusRule:
        enabled: false

flux2:
  enabled: false
  helmController:
    create: false
  imageAutomationController:
    create: false
  imageReflectionController:
    create: false
  kustomizeController:
    create: false
  notificationController:
    create: false
  sourceController:
    create: true
  policies:
    create: false