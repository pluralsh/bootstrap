apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  annotations:
    description: Requires the presence and operation of Config Management. Constraints
      using this `ConstraintTemplate` will be audit only regardless of `enforcementAction`
      value.
    metadata.gatekeeper.sh/requires-sync-data: |
      "[
        [
          {
            "groups": ["configsync.gke.io"],
            "versions": ["v1beta1"],
            "kinds": ["RootSync"]
          }
        ]
      ]"
    metadata.gatekeeper.sh/title: Enforce Config Management
  labels:
    app.kubernetes.io/managed-by: deployments.plural.sh
  name: k8senforceconfigmanagement
spec:
  crd:
    spec:
      names:
        kind: K8sEnforceConfigManagement
      validation:
        legacySchema: false
        openAPIV3Schema:
          properties:
            requireDriftPrevention:
              default: false
              description: Require Config Sync drift prevention to prevent config
                drift.
              type: boolean
            requireRootSync:
              default: false
              description: Require a Config Sync `RootSync` object for cluster config
                management.
              type: boolean
          type: object
  targets:
  - rego: |
      package k8senforceconfigmanagement

      violation[{"msg": msg}] {
        input.review.kind.kind == "ConfigManagement"
        input.review.kind.group == "configmanagement.gke.io"

        # Audit Only, do not block as status is a derived value
        input.review.operation != "UPDATE"
        input.review.operation != "CREATE"
        health := object.get(input.review.object.status, "healthy", false)
        health == false
        msg := "Config Management operator is unhealthy. Check operator logs for more information."
      }

      violation[{"msg": msg}] {
        input.review.kind.kind == "ConfigManagement"
        input.review.kind.group == "configmanagement.gke.io"

        # Audit Only, do not block as preventDrift cannot be set directly
        input.review.operation != "UPDATE"
        input.review.operation != "CREATE"
        object.get(object.get(input.review.object, "spec", {}), "preventDrift", false) == false
        object.get(input.parameters, "requireDriftPrevention", false) == true
        msg := "Config Sync admission webhook is not enabled.  Enable to prevent configuration drift."
      }

      violation[{"msg": msg}] {
        input.review.kind.kind == "ConfigManagement"
        input.review.kind.group == "configmanagement.gke.io"

        # Audit Only, do not block as Config Sync is required to create a RootSync object
        input.review.operation != "UPDATE"
        input.review.operation != "CREATE"
        not cluster_has_rootsync(input.review)
        object.get(input.parameters, "requireRootSync", false) == true
        msg := "No Config Sync RootSync object detected.  Create to enforce cluster Config Management."
      }

      cluster_has_rootsync(_) {
        count(data.inventory.namespace[_][_].RootSync[_]) > 0
      }
    target: admission.k8s.gatekeeper.sh
